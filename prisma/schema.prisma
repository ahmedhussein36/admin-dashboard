// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  favoriteIds    String[]      @db.ObjectId
  accounts       Account[]
  listings       Listing[]
  reservations   Reservation[]
  properties     Property[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  imageSrc      String
  createdAt     DateTime @default(now())
  category      String
  roomCount     Int
  bathroomCount Int
  guestCount    Int
  locationValue String
  price         Int

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  reservations Reservation[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Property {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  imageSrc          String
  propertyImages    String[]
  createdAt         DateTime @default(now())
  category          String
  roomCount         Int
  bathroomCount     Int
  saleType          String
  propertyType      String
  propertyGroup     String
  paymentPlan       String
  downPayment       Int
  installmentValue  Int
  installmentPeriod Int
  developerName     String
  commissionValue   Float
  price             Int
  currency          String
  size              Int
  sizeUnit          String
  address           String
  phone             String
  whatsapp          String
  country           String
  cityValue         String
  ariaValue         String
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  developer_id Int?
  developer    Developer? @relation(fields: [developer_id], references: [developerId])

  area_id     Int?
  area        Area?     @relation(fields: [area_id], references: [areaId])
  Compound    Compound? @relation(fields: [compound_id], references: [compoundId])
  compound_id Int?
}

model Compound {
  id                               String   @id @default(auto()) @map("_id") @db.ObjectId
  compoundId                       Int      @unique
  createdAt                        DateTime @default(now())
  updatedAt                        DateTime @updatedAt
  name                             String
  description                      String?
  is_super                         Boolean?
  slug                             String   @unique
  properties_count                 Int?
  image                            String?
  min_price                        Int?
  max_price                        Int?
  min_unit_area                    Int?
  max_unit_area                    Int?
  available_bathrooms              Int[]
  available_bedrooms               Int[]
  currency                         String?
  sponsored                        Int?
  max_installment_years            Int?
  min_down_payment                 Int?
  min_ready_by                     String?
  properties_ids                   Int[]
  sum_10_properties_min_price      Int?
  lat                              Float?
  long                             Float?
  has_offer                        Boolean?
  has_launches                     Boolean?
  is_launch                        Boolean?
  offer_title                      String?
  limited_time_offer               Boolean?
  property_types                   String[]
  advertising_image_path           String?
  property_types_count             Json?
  favorite                         Boolean?
  property_types_count_highlighted Json?

  properties Property[]

  developer   Developer @relation(fields: [developerId], references: [developerId])
  developerId Int
  area        Area      @relation(fields: [areaId], references: [areaId])
  areaId      Int
}

model Developer {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  developerId   Int                @unique
  name          String
  slug          String             @unique
  image         String?
  min_price     String?
  description   String?
  created_at    DateTime?          @default(now())
  updated_at    DateTime?          @updatedAt
  add_to_slider Boolean?
  logo_image    Json?
  official_name String?
  compounds     Int
  properties    Int
  compound      Compound[]
  property      Property[]
  area          developersOnArea[]
}

model Area {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  areaId      Int                @unique
  slug        String             @unique
  name        String
  description String?
  created_at  DateTime           @default(now())
  updated_at  DateTime           @updatedAt
  lat         Float?
  long        Float?
  image       String
  compounds   Compound[]
  Property    Property[]
  developer   developersOnArea[]
}

model developersOnArea {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  developerId Int
  areaId      Int
  developer   Developer @relation(fields: [developerId], references: [developerId])
  area        Area      @relation(fields: [areaId], references: [areaId])

  @@unique([developerId, areaId])
}
